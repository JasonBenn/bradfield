How do you distinguish b/w OLAP and OLTP? When you're doing some % of writes? (0%?)
  Nah - do it by size/volume. Less than 100G? Just go OLTP.

Add column to row store: you'd have to move all data around! That's why it takes so long. Adding to column store is almost instantaneous - you're just appending.

Disk is magnetic device. API involves seeking to data location.
4k pages of RAM corresponding to 4k you pull off disk.

Block = disk term
Page = RAM term
Usually we get them to line up.

Locality benefit works all the way from disk to CPU.
"Memory management unit checks L1 for values..."

Column store: all about memory locality.

Real DBMS: won't use malloc, will use own allocator. Will make things sit inside cache lines, struct packing, etc.

---

Relational vs non-relational

FIRST: HEIRARCHICAL
among the first programs were dbms'. IMS is from the 60s.
IMS: heirarchical dbms: a has many b has many c, etc. (figure out what sits inside of what)
queries are basically like DOM traversal
not the best way - many to many doesn't work! should be separate relation, not nested.

THEN: RELATIONS
one guy in the 70s
relations (tables) have instances (rows)
we can reason about subsets, unions, joins, etc by matching IDs.

relation, tldr: each instance has fixed set of columns. every operation relies on this assumption.
non-relation: things don't have same number of columns. arbitrary nesting, not necessarily schema.

datomic sits on top of postgres and memcache etc, gives you an entirely different set of semantics.
dynamoDB designed to support amazon shopping cart - never fail, ok to have copies.
  tldr; different copies of data voting on what truth is.

---

SQL vs NoSQL

SQL: declarative language for data querying. intentionally simple.
  turing complete: thing can compute anything that can be computed.
  SQL parsed into query plan (kinda like AST)

NoSQL: ?

SQL frontends are popular - even if the primitives are like map and reduce.

postgres came first - didn't have SQL frontend. postgresql is like everything after.

---

RAM is byte addressable
Pages are somewhat larger, so they can remember
external fragmentation - not enough spaces to fit pages. 4kB pages is standard.

?FC: sysctl

---

process: abstraction for isolating memory
thread: abstraction for isolating compute

---

Multix - first system to accomodate multiple users, bc they were all dickbags at MIT messing w each others memory
unix - inspired by multix

---

if processes don't share memory, how do they communicate? need explicit way
memory mapping, unix pipes, tcp/ip.

use mmap to get shared memory. could use to implement pipes. but now you need to sync processes yourself using mutual exclusions.

---

?FC: parallelism vs concurrency

parallelism: actual simultaneous, using multiple cores
concurrency: illusion of same time (i.e., common implemtations use event loop). running in interleaved manner.

(pipes run in parallel, cool)

---

?FC: 2^10 = k, 2^20 = M, 2^30 = T etc
powers of 10

grep -r 'SOVIET TROOPS IN ORANIENBURG' cia-crest-files-cia-crest-archive-metadata/. | awk 'BEGIN { OFS="," } { print $3 }'




table: row-oriented.
if you use hash map: "make it a separate structure that references in"
loader code that loads into memory, parses it, allows search over memory

write read file code in C:
compare in memory performance to disk performance.


if we have time, work towards index.


every byte: drop the last 6: those are your cache lines.
drop the next 4: those are your pages.


just truncate to find addresses.

---

text vs varchar vs char
char(100): gives you 100 chars back, incl spaces and null chars
varchar(100): gives you strings, null terminated
text: pointer to elsewhere.





